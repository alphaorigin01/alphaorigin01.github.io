// Generated by CoffeeScript 1.9.2
(function() {
  'use strict';
  var ProtocolService;

  ProtocolService = angular.module('ProtocolService', ['CompoundService', 'AthleteService', 'BTCService', 'PubNubService']);


  /*                        Service */

  ProtocolService.factory('Protocol', [
    'Compounds', 'Athlete', 'BTCrate', 'PubNub', '$http', '$rootScope', '$timeout', function(Compounds, Athlete, BTCrate, PubNub, $http, $rootScope, $timeout) {
      var Protocol, Regimen, cache, newProtocol;
      $rootScope.$on('UpdateAthlete', function(e, data) {
        return Athlete = data;
      });
      Regimen = (function() {
        function Regimen(_compoundId, _protocol) {
          var activeTarget, compound, density, dose, duration, graph, hashkey, interval, levels, loadingDose, protocol, save, startDay, that, update, variance;
          that = this;
          save = function() {
            return _protocol._save();
          };
          update = function() {
            var adjustedActiveTarget, levelsMinion;
            if (that.compound == null) {
              return;
            }
            levelsMinion = new Worker('assets/js/Worker_CalculateLevels.js');
            levelsMinion.onmessage = function(e) {
              that.levels = e.data.levels;
              that.dose = Math.ceil(e.data.dose);
              that.loadingDose = Math.ceil(e.data.loadingDose);
              that.variance = (1 - (that.adjustedActiveTarget / e.data.max)) * 100;
              $rootScope.$evalAsync(function() {
                var addData, hour;
                hour = (that.startDay - 1) * 24;
                addData = function(element, index, list) {
                  var data;
                  data = {
                    hour: hour + index
                  };
                  data[_compoundId] = Math.round(element);
                  return data;
                };
                that.graphDataProvider = _.map(that.levels, addData);
                if (that.graph != null) {
                  that.graph.dataProvider = that.graphDataProvider;
                  setTimeout(function() {
                    return that.graph.validateData();
                  });
                  return that.graph.zoomToIndexes(1, that.graph.dataProvider.length - 2);
                }
              });
              return that.protocol._update();
            };
            adjustedActiveTarget = that.adjustedActiveTarget;
            return levelsMinion.postMessage({
              halfLife: that.compound.halfLife,
              bioavailability: that.compound.bioavailability,
              duration: that.duration,
              interval: that.interval,
              density: that.density,
              activeTarget: adjustedActiveTarget
            });
          };
          update = _.debounce(update, 250);
          hashkey = null;
          Object.defineProperty(this, '$$hashkey', {
            enumerable: false
          });
          protocol = _protocol;
          Object.defineProperty(this, 'protocol', {
            get: function() {
              return protocol;
            },
            set: function() {}
          });
          compound = Compounds(_compoundId);
          Object.defineProperty(this, 'compound', {
            enumerable: true,
            get: function() {
              return compound;
            },
            set: function() {}
          });
          activeTarget = compound.ffmiStandard;
          Object.defineProperty(this, 'activeTarget', {
            enumerable: true,
            get: function() {
              return activeTarget;
            },
            set: function(x) {
              if (activeTarget !== x) {
                activeTarget = x;
                save();
                return update();
              }
            }
          });
          density = compound.density / 2;
          Object.defineProperty(this, 'density', {
            enumerable: true,
            get: function() {
              return density;
            },
            set: function(x) {
              if (x > compound.density) {
                return density = compound.density;
              }
              if (density !== x) {
                density = Math.round(x / 5) * 5;
                save();
                return update();
              }
            }
          });
          interval = compound.ffmiInterval;
          Object.defineProperty(this, 'interval', {
            enumerable: true,
            get: function() {
              return interval;
            },
            set: function(x) {
              if (interval !== x) {
                interval = Math.round(x);
                save();
                return update();
              }
            }
          });
          startDay = 1;
          Object.defineProperty(this, 'startDay', {
            enumerable: true,
            get: function() {
              return startDay;
            },
            set: function(x) {
              if (startDay !== x) {
                startDay = Math.round(x);
                save();
                return update();
              }
            }
          });
          duration = compound.ffmiInterval;
          Object.defineProperty(this, 'duration', {
            enumerable: true,
            get: function() {
              return duration;
            },
            set: function(x) {
              if (duration !== x) {
                if (x > 140) {
                  x = Math.floor(140 / this.interval) * this.interval;
                }
                duration = Math.round(x / this.interval) * this.interval;
                save();
                return update();
              }
            }
          });
          Object.defineProperty(this, 'graphDataProvider', {
            enumerable: false,
            writable: true
          });
          graph = null;
          Object.defineProperty(this, 'graph', {
            get: function() {
              return graph;
            },
            set: function(x) {
              graph = AmCharts.makeChart(x[0], {
                'type': 'serial',
                'theme': 'none',
                'pathToImages': 'http://cdn.amcharts.com/lib/3/images/',
                'categoryField': 'hour',
                'autoMargins': false,
                'marginBottom': 0,
                'marginLeft': 0,
                'marginRight': 0,
                'marginTop': 0,
                'borderAlpha': 0,
                'chartCursor': {
                  'selectWithoutZooming': true,
                  'zoomable': false,
                  'zooming': false
                },
                'zoomOutButtonImage': '',
                'zoomOutText': '',
                'graphs': [
                  {
                    'fillAlphas': 1,
                    'fillColors': this.compound.color,
                    'id': 'AmGraph-1',
                    'lineAlpha': 0,
                    'title': 'Rate of Compound Release',
                    'type': 'line',
                    'valueField': this.compound.id,
                    'balloonFunction': function(graphDataItem, graph) {
                      var day, hour;
                      day = Math.floor(parseInt(graphDataItem.category) / 24) + 1;
                      hour = Math.floor((parseInt(graphDataItem.category) / 24 - day + 1) / (1 / 24));
                      return graphDataItem.values.value + 'mg<br>Day: ' + day + ' Hour: ' + hour;
                    }
                  }
                ],
                'valueAxes': [
                  {
                    'id': 'ValueAxis-1',
                    'title': 'Axis title',
                    'axisAlpha': 0,
                    'gridAlpha': 0
                  }
                ],
                'categoryAxis': {
                  'axisAlpha': 0,
                  'gridAlpha': 0,
                  'minorGridAlpha': 0
                },
                'dataProvider': []
              });
              that = this;
              return $rootScope.$evalAsync(function() {
                that.graph.dataProvider = that.graphDataProvider;
                setTimeout(function() {
                  return that.graph.validateData();
                });
                return that.graph.zoomToIndexes(1, that.graph.dataProvider.length - 2);
              });
            }
          });
          levels = null;
          Object.defineProperty(this, 'levels', {
            get: function() {
              if (!levels || levels.length === 0) {
                update();
              }
              return levels;
            },
            set: function(x) {
              return levels = x;
            }
          });
          variance = 0;
          Object.defineProperty(this, 'variance', {
            get: function() {
              return variance;
            },
            set: function(x) {
              return variance = x;
            }
          });
          dose = 0;
          Object.defineProperty(this, 'dose', {
            get: function() {
              return dose;
            },
            set: function(x) {
              return dose = x;
            }
          });
          Object.defineProperty(this, 'doseVolume', {
            get: function() {
              return this.dose / density;
            },
            set: function(x) {}
          });
          loadingDose = 0;
          Object.defineProperty(this, 'loadingDose', {
            get: function() {
              return loadingDose;
            },
            set: function(x) {
              return loadingDose = x;
            }
          });
          Object.defineProperty(this, 'loadingVolume', {
            get: function() {
              return this.loadingDose / density;
            },
            set: function(x) {}
          });
          Object.defineProperty(this, 'totalVolume', {
            get: function() {
              return (this.doseVolume * (this.duration / this.interval)) + this.loadingVolume;
            },
            set: function(x) {}
          });
          Object.defineProperty(this, 'adjustedActiveTarget', {
            get: function() {
              return Math.round(this.activeTarget * (Athlete.ffmi / 25));
            },
            set: function(x) {
              return this.activeTarget = Math.round(parseFloat(x) * (25 / Athlete.ffmi));
            }
          });
          update();
          save();
        }

        return Regimen;

      })();
      Protocol = (function() {
        function Protocol() {
          var components, description, experience, formulations, goal, graph, hashkey, owner, pharmacodynamics, priceUSD, ref, save, schedule, that, title, update;
          that = this;
          save = function() {
            if (that.owner === Athlete._id && that.components.length > 0) {
              return PubNub('ProtocolService : Set Protocol', that);
            }
          };
          this._save = save = _.debounce(save, 5000);
          update = function() {
            var accessoriesQty, day, formulation, formulations, i, j, k, len, ref, ref1, ref2, ref3, regimensByDose, regimensByTime, s, schedule, volume;
            that.priceUSD = 0;
            formulations = {};
            regimensByTime = _.groupBy(that.components, function(e) {
              return e.startDay + ":" + e.interval + ":" + e.duration + ":" + e.compound.mode + ":" + e.dilution;
            });
            regimensByDose = _.groupBy(_.values(regimensByTime), function(e) {
              var id, j, len, r;
              id = '';
              for (j = 0, len = e.length; j < len; j++) {
                r = e[j];
                id += r.compound.id + '[' + r.activeTarget + ']';
              }
              return id;
            });
            _.each(_.values(regimensByDose), function(e, i) {
              var adjustedDoseVolume, adjustmentMultiplier, fillerPerDose, fillerPerVolume, formulation, j, k, len, len1, regimen, s, schedule;
              formulation = {
                id: String.fromCharCode(65 + i),
                schedules: [],
                compounds: {},
                filler: 0,
                totalVolume: 0
              };
              for (j = 0, len = e.length; j < len; j++) {
                s = e[j];
                schedule = {
                  startDay: s[0].startDay,
                  interval: s[0].interval,
                  duration: s[0].duration,
                  doses: s[0].duration / s[0].interval,
                  loadingVolume: 0,
                  doseVolume: 0,
                  totalVolume: 0
                };
                for (k = 0, len1 = s.length; k < len1; k++) {
                  regimen = s[k];
                  schedule.doseVolume += regimen.doseVolume;
                  schedule.loadingVolume += regimen.loadingVolume;
                  if (formulation.compounds[regimen.compoundId] == null) {
                    formulation.compounds[regimen.compound.id] = 0;
                  }
                  formulation.compounds[regimen.compound.id] += regimen.totalVolume * (regimen.density / regimen.compound.density);
                  formulation.filler += regimen.totalVolume * (1 - (regimen.density / regimen.compound.density));
                  that.priceUSD += regimen.totalVolume * regimen.compound.density * regimen.compound.price * (regimen.density / regimen.compound.density);
                }
                adjustedDoseVolume = Math.ceil(schedule.doseVolume * 10) / 10;
                adjustmentMultiplier = adjustedDoseVolume / schedule.doseVolume;
                fillerPerDose = adjustedDoseVolume - schedule.doseVolume;
                fillerPerVolume = fillerPerDose / schedule.doseVolume;
                schedule.doseVolume = adjustedDoseVolume;
                schedule.loadingVolume = Math.ceil(schedule.loadingVolume * adjustmentMultiplier * 10) / 10;
                schedule.totalVolume = schedule.loadingVolume + (schedule.doseVolume * schedule.doses);
                formulation.totalVolume += schedule.totalVolume;
                formulation.filler += schedule.totalVolume * fillerPerVolume;
                formulation.schedules.push(schedule);
              }
              that.priceUSD += formulation.filler * 0.025;
              that.priceUSD += Math.ceil(formulation.totalVolume / 30) * 2;
              return formulations[formulation.id] = formulation;
            });
            that.formulations = formulations;
            schedule = [];
            volume = [];
            for (i in that.formulations) {
              formulation = that.formulations[i];
              ref = formulation.schedules;
              for (j = 0, len = ref.length; j < len; j++) {
                s = ref[j];
                for (day = k = ref1 = s.startDay, ref2 = s.duration, ref3 = s.interval; ref3 > 0 ? k <= ref2 : k >= ref2; day = k += ref3) {
                  if (schedule[day] == null) {
                    schedule[day] = [];
                  }
                  schedule[day].push(formulation.id);
                  schedule[day] = _.uniq(schedule[day]);
                  volume[day] = s.doseVolume;
                }
              }
            }
            that.schedule = schedule;
            accessoriesQty = 0;
            _.each(volume, function(v) {
              if (v == null) {
                return;
              }
              return accessoriesQty += Math.ceil(v / 3);
            });
            that.accessoriesQty = accessoriesQty;
            that.accessoriesPriceUSD = accessoriesQty * 0.2;
            that.accessoriesPriceUSD += 5;
            that.accessoriesPriceUSD += 2;
            that.priceUSD += that.accessoriesPriceUSD * 2;
            return $rootScope.$evalAsync(function() {
              var a, c, compound, compoundIds, data, g, id, item, l, len1, len2, len3, len4, len5, levels, m, mg, o, p, q, receptorLevels, ref4, ref5, ref6, ref7, regimen;
              if (that.graph != null) {
                that.graph.graphs = [];
                compoundIds = [];
                ref4 = that.components;
                for (l = 0, len1 = ref4.length; l < len1; l++) {
                  regimen = ref4[l];
                  compoundIds.push(regimen.compound.id);
                }
                ref5 = _.uniq(compoundIds);
                for (m = 0, len2 = ref5.length; m < len2; m++) {
                  id = ref5[m];
                  g = new AmCharts.AmGraph();
                  g.fillAlphas = 1;
                  g.fillColors = Compounds(id).color;
                  g.lineAlpha = 0;
                  g.title = 'Rate of Compound Release';
                  g.valueField = id;
                  g.balloonFunction = function(graphDataItem, graph) {
                    var hour;
                    day = Math.floor(parseInt(graphDataItem.category) / 24) + 1;
                    hour = Math.floor((parseInt(graphDataItem.category) / 24 - day + 1) / (1 / 24));
                    return graphDataItem.values.value + 'mg - Day: ' + day + ' Hour: ' + hour;
                  };
                  that.graph.addGraph(g);
                }
                data = Array.apply(null, Array(260 * 24)).map(Object);
                ref6 = that.components;
                for (o = 0, len3 = ref6.length; o < len3; o++) {
                  regimen = ref6[o];
                  _.each(regimen.levels, function(element, index, list) {
                    if (!_.isNumber(data[((regimen.startDay - 1) * 24) + index][regimen.compoundId])) {
                      data[((regimen.startDay - 1) * 24) + index][regimen.compound.id] = 0;
                    }
                    return data[((regimen.startDay - 1) * 24) + index][regimen.compound.id] += Math.round(element);
                  });
                }
                levels = Array.apply(null, Array(260 * 24)).map(Object);
                _.each(data, function(element, index, list) {
                  element.hour = index;
                  return levels[index] = element;
                });
                levels = _.dropRightWhile(levels, function(n) {
                  return Object.keys(n).length === 1;
                });
                that.graph.dataProvider = levels;
                that.graph.validateData();
                ref7 = that.graph.graphs;
                for (p = 0, len4 = ref7.length; p < len4; p++) {
                  g = ref7[p];
                  g.connect = false;
                }
                that.graph.drawChart();
                $timeout(function() {
                  if (that.graph.chartData.length === 0) {
                    return that._update();
                  }
                });
                if (that.pharmacodynamics != null) {
                  that.pharmacodynamics.graphs = [];
                  g = new AmCharts.AmGraph();
                  g.fillColors = g.lineColor = 'rgba(255, 67, 81, 1)';
                  g.title = 'Androgen Receptor Activity';
                  g.valueField = 'androgen';
                  g.type = 'smoothedLine';
                  g.lineThickness = 1;
                  g.fillAlphas = 1;
                  g.connect = false;
                  g.balloonFunction = function(graphDataItem, graph) {
                    var hour;
                    day = Math.floor(parseInt(graphDataItem.category) / 24) + 1;
                    hour = Math.floor((parseInt(graphDataItem.category) / 24 - day + 1) / (1 / 24));
                    return graphDataItem.values.value + 'x - Day: ' + day + ' Hour: ' + hour;
                  };
                  that.pharmacodynamics.addGraph(g);
                  g = new AmCharts.AmGraph();
                  g.fillColors = g.lineColor = 'rgba(27, 154, 247, 1)';
                  g.title = 'Progesterone Receptor Activity';
                  g.valueField = 'progesterone';
                  g.type = 'smoothedLine';
                  g.lineThickness = 1;
                  g.fillAlphas = 1;
                  g.connect = false;
                  g.balloonFunction = function(graphDataItem, graph) {
                    var hour;
                    day = Math.floor(parseInt(graphDataItem.category) / 24) + 1;
                    hour = Math.floor((parseInt(graphDataItem.category) / 24 - day + 1) / (1 / 24));
                    return graphDataItem.values.value + 'x - Day: ' + day + ' Hour: ' + hour;
                  };
                  that.pharmacodynamics.addGraph(g);
                  g = new AmCharts.AmGraph();
                  g.fillColors = g.lineColor = 'rgba(250, 136, 41, 1)';
                  g.title = 'Estrogen α Receptor Activity';
                  g.valueField = 'estrogenAlpha';
                  g.type = 'smoothedLine';
                  g.lineThickness = 1;
                  g.fillAlphas = 1;
                  g.connect = false;
                  g.balloonFunction = function(graphDataItem, graph) {
                    var hour;
                    day = Math.floor(parseInt(graphDataItem.category) / 24) + 1;
                    hour = Math.floor((parseInt(graphDataItem.category) / 24 - day + 1) / (1 / 24));
                    return graphDataItem.values.value + 'x - Day: ' + day + ' Hour: ' + hour;
                  };
                  that.pharmacodynamics.addGraph(g);
                  g = new AmCharts.AmGraph();
                  g.fillColors = g.lineColor = 'rgba(254, 211, 62, 1)';
                  g.title = 'Estrogen β Receptor Activity';
                  g.valueField = 'estrogenBeta';
                  g.type = 'smoothedLine';
                  g.lineThickness = 1;
                  g.fillAlphas = 1;
                  g.connect = false;
                  g.balloonFunction = function(graphDataItem, graph) {
                    var hour;
                    day = Math.floor(parseInt(graphDataItem.category) / 24) + 1;
                    hour = Math.floor((parseInt(graphDataItem.category) / 24 - day + 1) / (1 / 24));
                    return graphDataItem.values.value + 'x - Day: ' + day + ' Hour: ' + hour;
                  };
                  that.pharmacodynamics.addGraph(g);
                  g = new AmCharts.AmGraph();
                  g.lineColor = 'rgba(81, 230, 80, 1)';
                  g.title = 'Gucocorticoid Receptor Activity';
                  g.valueField = 'glucocorticoid';
                  g.type = 'smoothedLine';
                  g.lineThickness = 1;
                  g.fillAlphas = 1;
                  g.connect = false;
                  g.balloonFunction = function(graphDataItem, graph) {
                    var hour;
                    day = Math.floor(parseInt(graphDataItem.category) / 24) + 1;
                    hour = Math.floor((parseInt(graphDataItem.category) / 24 - day + 1) / (1 / 24));
                    return graphDataItem.values.value + 'x - Day: ' + day + ' Hour: ' + hour;
                  };
                  that.pharmacodynamics.addGraph(g);
                  that.pharmacodynamics.dataProvider = receptorLevels = [];
                  for (q = 0, len5 = levels.length; q < len5; q++) {
                    item = levels[q];
                    a = {
                      hour: item.hour,
                      androgen: 0,
                      progesterone: 0,
                      estrogenAlpha: 0,
                      estrogenBeta: 0,
                      glucocorticoid: 0
                    };
                    for (compound in item) {
                      mg = item[compound];
                      if (compound.startsWith('C-')) {
                        c = Compounds(compound);
                        a.androgen += mg * c.androgenReceptor;
                        a.progesterone += mg * c.progesteroneReceptor;
                        a.estrogenAlpha += mg * c.estrogenAlphaReceptor;
                        a.estrogenBeta += mg * c.estrogenBetaReceptor;
                        a.glucocorticoid += mg * c.glucocorticoidReceptor;
                      }
                    }
                    a.androgen = Math.round(a.androgen);
                    a.progesterone = Math.round(a.progesterone);
                    a.estrogenAlpha = Math.round(a.estrogenAlpha);
                    a.estrogenBeta = Math.round(a.estrogenBeta);
                    a.glucocorticoid = Math.round(a.glucocorticoid);
                    receptorLevels.push(a);
                  }
                  that.pharmacodynamics.validateData();
                  return $timeout(function() {
                    if (that.pharmacodynamics.chartData.length === 0) {
                      return that._update();
                    }
                  });
                }
              }
            });
          };
          this._update = update = _.debounce(update, 250);
          hashkey = null;
          Object.defineProperty(this, '$$hashkey', {
            enumerable: false
          });
          owner = '';
          Object.defineProperty(this, 'owner', {
            enumerable: true,
            get: function() {
              return owner;
            },
            set: function(x) {
              if (owner !== x) {
                owner = x;
                return save();
              }
            }
          });
          title = '';
          Object.defineProperty(this, 'title', {
            enumerable: true,
            get: function() {
              return title;
            },
            set: function(x) {
              if (title !== x) {
                title = x;
                return save();
              }
            }
          });
          description = '';
          Object.defineProperty(this, 'description', {
            enumerable: true,
            get: function() {
              return description;
            },
            set: function(x) {
              if (description !== x) {
                description = x;
                return save();
              }
            }
          });
          if (Athlete.ffmi <= 20) {
            experience = 'Beginner';
          }
          if ((25 > (ref = Athlete.ffmi) && ref > 20)) {
            experience = 'Intermediate';
          }
          if (Athlete.ffmi > 25) {
            experience = 'Advanced';
          }
          Object.defineProperty(this, 'experience', {
            enumerable: true,
            get: function() {
              return experience;
            },
            set: function(x) {
              if (experience !== x) {
                experience = x;
                return save();
              }
            }
          });
          goal = 'Hypertrophy';
          Object.defineProperty(this, 'goal', {
            enumerable: true,
            get: function() {
              return goal;
            },
            set: function(x) {
              if (goal !== x) {
                goal = x;
                return save();
              }
            }
          });
          components = [];
          Object.defineProperty(this, 'components', {
            enumerable: true,
            get: function() {
              return components;
            },
            set: function(x) {
              if (components !== x) {
                components = x;
                return save();
              }
            }
          });
          graph = null;
          Object.defineProperty(this, 'graph', {
            get: function() {
              return graph;
            },
            set: function(x) {
              graph = AmCharts.makeChart(x[0], {
                'type': 'serial',
                'pathToImages': 'http://cdn.amcharts.com/lib/3/images/',
                'categoryField': 'hour',
                'autoMargins': false,
                'marginBottom': 0,
                'marginLeft': 0,
                'marginRight': 0,
                'marginTop': 0,
                'borderAlpha': 0,
                'chartCursor': {
                  'selectWithoutZooming': true,
                  'zoomable': false,
                  'zooming': false
                },
                'zoomOutButtonImage': '',
                'zoomOutText': '',
                'graphs': [
                  {
                    'connect': false
                  }
                ],
                'valueAxes': [
                  {
                    'id': 'ValueAxis-1',
                    'stackType': 'regular',
                    'title': 'Axis title',
                    'axisAlpha': 0,
                    'gridAlpha': 0
                  }
                ],
                'categoryAxis': {
                  'axisAlpha': 0,
                  'gridAlpha': 0,
                  'minorGridAlpha': 0
                },
                'dataProvider': []
              });
              return that._update();
            }
          });
          pharmacodynamics = null;
          Object.defineProperty(this, 'pharmacodynamics', {
            get: function() {
              return pharmacodynamics;
            },
            set: function(x) {
              pharmacodynamics = AmCharts.makeChart(x[0], {
                'type': 'serial',
                'pathToImages': 'http://cdn.amcharts.com/lib/3/images/',
                'categoryField': 'hour',
                'autoMargins': false,
                'marginBottom': 0,
                'marginLeft': 0,
                'marginRight': 0,
                'marginTop': 0,
                'borderAlpha': 0,
                'chartCursor': {
                  'selectWithoutZooming': true,
                  'zoomable': false,
                  'zooming': false
                },
                'zoomOutButtonImage': '',
                'zoomOutText': '',
                'graphs': [],
                'valueAxes': [
                  {
                    'id': 'ValueAxis-1',
                    'title': 'Axis title',
                    'axisAlpha': 0,
                    'gridAlpha': 0
                  }
                ],
                'categoryAxis': {
                  'axisAlpha': 0,
                  'gridAlpha': 0,
                  'minorGridAlpha': 0
                },
                'dataProvider': []
              });
              return that._update();
            }
          });
          priceUSD = 0;
          Object.defineProperty(this, 'priceUSD', {
            enumerable: true,
            get: function() {
              if (this.components.length === 0) {
                return 0;
              } else {
                return priceUSD;
              }
            },
            set: function(x) {
              if (priceUSD !== x) {
                return priceUSD = x;
              }
            }
          });
          Object.defineProperty(this, 'priceBTC', {
            get: function() {
              return this.priceUSD * BTCrate();
            },
            set: function() {}
          });
          formulations = [];
          Object.defineProperty(this, 'formulations', {
            enumerable: true,
            get: function() {
              if (this.components.length !== 0 && !formulations) {
                that._update();
              }
              return formulations;
            },
            set: function(x) {
              if (formulations !== x) {
                return formulations = x;
              }
            }
          });
          schedule = [];
          Object.defineProperty(this, 'schedule', {
            get: function() {
              if (this.components.length !== 0 && !schedule) {
                update();
              }
              return schedule;
            },
            set: function(x) {
              if (schedule !== x) {
                return schedule = x;
              }
            }
          });
          Object.defineProperty(this, 'length', {
            enumerable: true,
            get: function() {
              return schedule.length - 1;
            },
            set: function() {
              return update();
            }
          });
          $rootScope.$on('ProtocolService : Update Protocol', function(e, data) {
            if (data._id === that._id) {
              return $rootScope.$evalAsync(function() {
                _.extend(that, data);
                that.components = [];
                return _.each(data.components, function(component) {
                  var c;
                  c = new Regimen(component.compound.id, that);
                  _.extend(c, component);
                  return that.components.push(c);
                });
              });
            }
          });
          $rootScope.$on('ProtocolService : Set Protocol Complete', function(e, data) {
            if (data.id === that._id) {
              return that._rev = data.rev;
            }
          });
        }

        Protocol.prototype.addComponent = function(cid) {
          this.components.unshift(new Regimen(cid, this));
          this._update();
          return this._save();
        };

        Protocol.prototype.removeComponent = function(r) {
          this.components.splice(r, 1);
          this._update();
          return this._save();
        };

        return Protocol;

      })();
      window.ProtocolService = cache = {};
      newProtocol = null;
      $rootScope.$on('ProtocolService : New Protocol Complete', function(e, data) {
        return $rootScope.$evalAsync(function() {
          newProtocol._id = data._id;
          newProtocol.owner = Athlete._id;
          return cache[data._id] = newProtocol;
        });
      });
      $rootScope.$on('ProtocolService : Search Results', function(e, data) {});
      return function(id, destroy) {
        if (destroy == null) {
          destroy = false;
        }
        if ((id != null) && (cache[id] != null) && !destroy) {
          return cache[id];
        }
        if (id != null) {
          if (!destroy) {
            cache[id] = new Protocol;
            cache[id]._id = id;
            PubNub('ProtocolService : Get Protocol', cache[id]);
            return cache[id];
          }
          if (destroy) {
            PubNub('ProtocolService : Delete Protocol', cache[id]);
            return delete cache[id];
          }
        } else {
          newProtocol = new Protocol;
          PubNub('ProtocolService : New Protocol', newProtocol);
          return newProtocol;
        }
      };
    }
  ]);

}).call(this);
