// Generated by CoffeeScript 1.9.2
(function() {
  'use strict';
  var PubNubService, nacl;

  window.nacl = nacl = require('ecma-nacl');

  PubNubService = angular.module('PubNubService', []);


  /*                        Service */

  PubNubService.factory('PubNub', [
    '$rootScope', function($rootScope) {
      var Decrypt, Encrypt, PubNub, ServerPublicKey, _decryptor, _encryptor, athlete_pkey, athlete_skey, pubnub_broadcast_config, textDecoder, textEncoder;
      window.textEncoder = textEncoder = new TextEncoder();
      window.textDecoder = textDecoder = new TextDecoder();
      window.athlete_skey = athlete_skey = new Uint8Array([198, 131, 161, 40, 127, 182, 95, 120, 238, 21, 211, 246, 62, 165, 73, 88, 127, 193, 29, 193, 60, 198, 183, 255, 187, 234, 222, 180, 206, 115, 50, 11]);
      window.athlete_pkey = athlete_pkey = nacl.box.generate_pubkey(athlete_skey);
      _encryptor = null;
      Encrypt = function(message) {
        var message_bytes, message_cipher, message_string;
        message_string = JSON.stringify(message);
        message_bytes = textEncoder.encode(message_string);
        message_cipher = _encryptor.pack(message_bytes);
        return _.flatten(message_cipher);
      };
      _decryptor = null;
      Decrypt = function(received_cipher) {
        var message, message_bytes, message_string;
        received_cipher = new Uint8Array(received_cipher);
        message_bytes = _decryptor.open(received_cipher);
        message_string = String.fromCharCode.apply(null, message_bytes);
        return message = JSON.parse(message_string);
      };
      pubnub_broadcast_config = {
        origin: 'rebtelsdk.pubnub.com',
        ssl: true,
        publish_key: 'pub-c-0ad3b937-16a4-4563-819a-d9c108daf8a1',
        subscribe_key: 'sub-c-cf1ec346-a876-11e2-80da-12313f022c90',
        cipher_key: 'sample'
      };
      window.PubNub = $rootScope.PubNub = PubNub = PUBNUB.init(pubnub_broadcast_config);
      PubNub.ready();
      ServerPublicKey = '';
      $rootScope.$on('Server : Online', function(e, data) {
        return window.ServerPublicKey = ServerPublicKey = new Uint8Array(data);
      });
      PubNub.subscribe({
        channel: '8e04b18a-f27f-430e-a772-6f91c5302ca',
        callback: function(message) {
          $rootScope.$broadcast(message.action, message.data);
          return console.log('Server - PubNub: ', message);
        },
        connect: function() {
          return $rootScope.$broadcast('PubNubService : Connected');
        }
      });
      $rootScope.$on('PubNubService : Initialize Athlete', function() {
        var nonce;
        nonce = new Uint8Array(24);
        crypto.getRandomValues(nonce);
        _decryptor = nacl.box.formatWN.makeDecryptor(ServerPublicKey, Athlete.secretKey, nacl.arrays.makeFactory());
        _encryptor = nacl.box.formatWN.makeEncryptor(ServerPublicKey, Athlete.secretKey, nonce, 2, nacl.arrays.makeFactory());
        PubNub.subscribe({
          channel: Athlete.channel,
          callback: function(message) {
            message = Decrypt(message);
            $rootScope.$broadcast(message.action, message.data);
            return console.log('Athlete - PubNub: ', message);
          },
          connect: function() {
            return $rootScope.$evalAsync(function() {
              return $rootScope.$broadcast('PubNubService : Athlete Connected');
            });
          }
        });
        return PubNub.subscribe({
          channel: Athlete.channel + 'S',
          callback: function(message) {
            $rootScope.$broadcast('Messages : Incoming Message', message);
            return console.log('Messages : Incoming Message', message);
          }
        });
      });
      return function(action, data) {
        var lastRequest, message, server_direct;
        server_direct = ['Server : Status', 'Server : Get BTCrate', 'AthleteService : Check Athlete ID', 'AthleteService : New Athlete', 'AthleteService : Get Athlete', 'OrderService : Get Processing Time'];
        if (action.startsWith('Messages : ')) {
          switch (action) {
            case 'Messages : Get History':
              return PubNub.history({
                channel: Athlete.channel + 'S',
                callback: function(m) {
                  return $rootScope.$broadcast('Messages : Update History', m);
                }
              });
            case 'Messages : Send Message':
              PubNub.publish({
                channel: Athlete.channel + 'S',
                message: data
              });
              return PubNub.publish({
                channel: '8e04b18a-f27f-430e-a772-6f91c5302caS',
                message: data
              });
          }
        } else {
          message = {
            action: action,
            data: data
          };
          if (server_direct.indexOf(action) === -1) {
            lastRequest = new Date();
            return PubNub.publish({
              channel: Athlete.channel,
              message: Encrypt(message)
            });
          } else {
            return PubNub.publish({
              channel: '8e04b18a-f27f-430e-a772-6f91c5302ca',
              message: message
            });
          }
        }
      };
    }
  ]);

}).call(this);
