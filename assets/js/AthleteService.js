// Generated by CoffeeScript 1.9.2
(function() {
  'use strict';
  var AthleteService;

  AthleteService = angular.module('AthleteService', ['PubNubService']);


  /*                        Service */

  AthleteService.factory('Athlete', [
    'PubNub', '$rootScope', '$http', function(PubNub, $rootScope, $http) {
      var Athlete, athlete;
      window.rootScope = $rootScope;
      Athlete = (function() {
        function Athlete() {
          var accountBalance, bodyFat, ffmiOffset, height, password, publicKey, save, secretKey, that, updateAccountBalance, weight;
          that = this;
          save = function() {
            if (that._rev != null) {
              return PubNub('AthleteService : Set Athlete', that);
            }
          };
          save = _.debounce(save, 1000);
          this.stars = {};
          this.setStars = function(protocol, stars) {
            PubNub('ProtocolService : Set Stats', {
              _id: protocol,
              previous: stars[protocol] ? stars[protocol] : 0,
              current: stars
            });
            this.stars[protocol] = stars;
            return save();
          };
          password = null;
          Object.defineProperty(this, 'password', {
            enumerable: false,
            get: function() {
              return password;
            },
            set: function(x) {
              var first;
              first = password === null;
              if (x !== password) {
                password = x;
                if (!first) {
                  return save();
                }
              }
            }
          });
          secretKey = crypto.getRandomValues(new Uint8Array(32));
          secretKey.toJSON = function() {
            return PUBNUB.raw_encrypt(_.flatten(secretKey), password);
          };
          Object.defineProperty(this, 'secretKey', {
            enumerable: true,
            get: function() {
              return secretKey;
            },
            set: function(x) {
              secretKey = new Uint8Array(PUBNUB.raw_decrypt(x, password));
              return secretKey.toJSON = function() {
                return PUBNUB.raw_encrypt(_.flatten(secretKey), password);
              };
            }
          });
          publicKey = nacl.box.generate_pubkey(secretKey);
          publicKey.toJSON = function() {
            return _.flatten(publicKey);
          };
          Object.defineProperty(this, 'publicKey', {
            enumerable: true,
            get: function() {
              return publicKey;
            },
            set: function(x) {
              return publicKey = new Uint8Array(x);
            }
          });
          this.favorites = [];
          this.toggleFavorite = function(x) {
            if (_.indexOf(this.favorites, x) >= 0) {
              _.remove(this.favorites, function(n) {
                return n === x;
              });
              return save();
            } else {
              this.favorites.push(x);
              return save();
            }
          };
          height = null;
          Object.defineProperty(this, 'height', {
            enumerable: true,
            get: function() {
              return height;
            },
            set: function(x) {
              if (height !== x) {
                height = Math.round(x * 1000) / 1000;
                return save();
              }
            }
          });
          weight = null;
          Object.defineProperty(this, 'weight', {
            enumerable: true,
            get: function() {
              return weight;
            },
            set: function(x) {
              if (weight !== x) {
                weight = Math.round(x * 10) / 10;
                return save();
              }
            }
          });
          bodyFat = null;
          Object.defineProperty(this, 'bodyFat', {
            enumerable: true,
            get: function() {
              return bodyFat;
            },
            set: function(x) {
              if (bodyFat !== x) {
                bodyFat = Math.round(x * 100) / 100;
                return save();
              }
            }
          });
          ffmiOffset = 0;
          Object.defineProperty(this, 'ffmiOffset', {
            enumerable: true,
            get: function() {
              return ffmiOffset;
            },
            set: function(x) {
              if (ffmiOffset !== x) {
                ffmiOffset = Math.round(x * 100) / 100;
                return save();
              }
            }
          });
          Object.defineProperty(this, 'lbm', {
            get: function() {
              return this.weight * (1 - (this.bodyFat * .01));
            },
            set: function() {}
          });
          Object.defineProperty(this, 'ffmi', {
            get: function() {
              return ((this.lbm / (this.height * this.height)) + (6 * (this.height - 1.8))) + this.ffmiOffset;
            },
            set: function() {}
          });
          accountBalance = 0;
          updateAccountBalance = function() {
            return $http.get('https://blockchain.info/q/addressbalance/' + that.BTCAddress + '?confirmations=6&cors=true').success(function(data) {
              return $rootScope.$evalAsync(function() {
                return accountBalance = that.accountCredit + (data / 100000000);
              });
            });
          };
          Object.defineProperty(this, 'accountBalance', {
            get: function() {
              return accountBalance;
            },
            set: updateAccountBalance
          });
          $rootScope.$on('AthleteService : Update Athlete', function(e, data) {
            if (data._id === that._id) {
              return $rootScope.$evalAsync(function() {
                that.secretKey = data.secretKey;
                if (that.secretKey.length !== 0) {
                  _.extend(that, data);
                  updateAccountBalance();
                  return $rootScope.$broadcast('PubNubService : Initialize Athlete');
                }
              });
            }
          });
          $rootScope.$on('AthleteService : Set Athlete Complete', function(e, data) {
            if (data.id === that._id) {
              return that._rev = data.rev;
            }
          });
        }

        return Athlete;

      })();
      window.Athlete = athlete = new Athlete;
      $rootScope.$on('AthleteService : Login', function(e, data) {
        athlete._id = 'athlete_' + data.username;
        athlete.password = data.password;
        return PubNub('AthleteService : Get Athlete', athlete);
      });
      return athlete;
    }
  ]);

}).call(this);
