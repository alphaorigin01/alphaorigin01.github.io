// Generated by CoffeeScript 1.9.2
(function() {
  'use strict';
  var app;

  app = angular.module('Search', ['Search', 'AthleteService', 'ProtocolService', 'PubNubService', 'CompoundService']);


  /*                      Controllers */

  app.controller('SearchController', [
    '$scope', '$rootScope', '$timeout', 'Athlete', 'Protocol', 'PubNub', 'Compounds', function($scope, $rootScope, $timeout, Athlete, Protocol, PubNub, Compounds) {
      var createNewProtocol, populate, searchResultsQueue, tab;
      tab = 1;
      $scope.selectTab = function(setTab) {
        $scope.$evalAsync(function() {
          $scope.searchResults = [];
          switch (setTab) {
            case 1:
              return PubNub('ProtocolService : Search', {
                q: 'owner:' + 'athlete_alpha'
              });
            case 2:
              return $scope.showFavorites();
            case 3:
              return PubNub('ProtocolService : Search', {
                q: 'owner:' + Athlete._id
              });
          }
        });
        return tab = setTab;
      };
      $scope.isSelected = function(checkTab) {
        return tab === checkTab;
      };
      $scope.$on('Context Switch', function(e, context) {
        return $scope.visibleSearch = _.contains(['Search'], context);
      });
      $scope.minDays = 1;
      $scope.maxDays = 140;
      $scope.$on('PubNubService : Athlete Connected', function() {
        return $timeout(function() {
          var ref;
          if (Athlete.ffmi < 20) {
            $scope.experience = 'Beginner';
          }
          if ((25 > (ref = Athlete.ffmi) && ref >= 20)) {
            $scope.experience = 'Intermediate';
          }
          if (Athlete.ffmi >= 25) {
            $scope.experience = 'Advanced';
          }
          $scope.showFavorites();
          return $scope.selectTab(2);
        });
      });
      $scope.Compounds = Compounds;
      createNewProtocol = function() {
        return $rootScope.$broadcast('Editor : Focus Protocol');
      };
      $scope.createNewProtocol = _.debounce(createNewProtocol, 2000, true);
      searchResultsQueue = [];
      $scope.searchResults = [];
      window.Search = $scope;
      $scope.searchCompounds = [null, null];
      $scope.searchCompoundName = function(i) {
        if ($scope.searchCompounds[i] != null) {
          return Compounds($scope.searchCompounds[i]).name;
        } else {
          return 'Search By Compound';
        }
      };
      $scope.searchCompoundColor = function(i) {
        if ($scope.searchCompounds[i] != null) {
          return Compounds($scope.searchCompounds[i]).color;
        } else {
          return 'none';
        }
      };
      $scope.toggleSearchCompound = function(i) {
        if ($scope.searchCompounds[i] != null) {
          $scope.searchCompounds[i] = null;
          return $scope.search();
        } else {
          $scope.choose_compound = true;
          return $scope.choose_compound_for = i;
        }
      };
      $scope.chooseCompound = function(id) {
        $scope.searchCompounds[$scope.choose_compound_for] = id;
        return $scope.search();
      };
      $scope.search = function() {
        var compounds, goals;
        goals = !$scope.strength && !$scope.hypertrophy && !$scope.recomposition && !$scope.performance ? ['Strength', 'Hypertrophy', 'Recomposition', 'Performance'] : [];
        if ($scope.strength) {
          goals.push('Strength');
        }
        if ($scope.hypertrophy) {
          goals.push('Hypertrophy');
        }
        if ($scope.recomposition) {
          goals.push('Recomposition');
        }
        if ($scope.performance) {
          goals.push('Performance');
        }
        compounds = '';
        if (($scope.searchCompounds[0] != null) && ($scope.searchCompounds[1] == null)) {
          compounds = ' AND compound:' + $scope.searchCompounds[0];
        }
        if (($scope.searchCompounds[1] != null) && ($scope.searchCompounds[0] == null)) {
          compounds = ' AND compound:' + $scope.searchCompounds[1];
        }
        if (($scope.searchCompounds[0] != null) && ($scope.searchCompounds[1] != null)) {
          compounds = ' AND compound:(' + $scope.searchCompounds[1] + ' AND ' + $scope.searchCompounds[0] + ')';
        }
        return PubNub('ProtocolService : Search', {
          q: 'length:[' + $scope.minDays + ' TO ' + $scope.maxDays + '] AND experience:' + $scope.experience + ' AND goal:(' + goals.toString().replace(/,/g, ' OR ') + ') AND ' + (tab === 3 ? 'owner:' + Athlete._id : 'public:true' + compounds)
        });
      };
      populate = function() {
        $scope.$evalAsync(function() {
          if (searchResultsQueue.length > 0) {
            return $scope.searchResults.push(searchResultsQueue.shift());
          }
        });
        return $scope.$evalAsync(function() {
          if (searchResultsQueue.length > 0 && $('#search_results')[0].getBoundingClientRect().bottom <= $(window).height()) {
            return populate();
          }
        });
      };
      $scope.showFavorites = function() {
        var id, j, len, ref;
        searchResultsQueue = [];
        ref = Athlete.favorites;
        for (j = 0, len = ref.length; j < len; j++) {
          id = ref[j];
          searchResultsQueue.push(Protocol(id));
        }
        return populate();
      };
      $(window).scroll(function() {
        if ($scope.visibleSearch) {
          return populate();
        }
      });
      $scope.$on('ProtocolService : Search Results', function(e, data) {
        return $scope.$evalAsync(function() {
          var j, len, ref, result;
          ref = data.rows;
          for (j = 0, len = ref.length; j < len; j++) {
            result = ref[j];
            searchResultsQueue.push(Protocol(result.id));
          }
          $scope.searchResults = [];
          return populate();
        });
      });
      return $scope.$on('ProtocolService : Delete Protocol Complete', $scope.search);
    }
  ]);


  /*                      Directives */

  app.directive('searchSection', function() {
    return {
      restrict: 'E',
      templateUrl: 'assets/templates/Search.html',
      controller: 'SearchController',
      scope: true,
      replace: true
    };
  });

}).call(this);
