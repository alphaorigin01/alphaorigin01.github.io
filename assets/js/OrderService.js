// Generated by CoffeeScript 1.9.2
(function() {
  'use strict';
  var OrderService;

  OrderService = angular.module('OrderService', ['ProtocolService', 'AthleteService', 'PubNubService', 'BTCService']);


  /*                        Service */

  OrderService.factory('Order', [
    'Protocol', 'Athlete', 'PubNub', 'BTCrate', '$rootScope', '$timeout', function(Protocol, Athlete, PubNub, BTCrate, $rootScope, $timeout) {
      var Order, orders;
      Order = (function() {
        function Order() {
          var that;
          this._id = 'order_' + Athlete._id + '_' + Date.now().toString(36).toUpperCase();
          this.date = new Date;
          this.type = 'Order';
          this.cart = {};
          this.accessoryQty = 0;
          this.accessoryPriceUSD = 0;
          this.grandTotal = 0;
          this.referral = '';
          this.name = '';
          this.address = '';
          this.address2 = '';
          this.city = '';
          this.state = '';
          this.zip = '';
          this.fulfillment = {
            paymentRecieved: false,
            paymentTimestamp: '',
            preparedMaterials: false,
            formulatedProtocols: false,
            shipped: false,
            shippedTimestamp: '',
            tracking: '',
            complete: false
          };
          that = this;
          $rootScope.$on('OrderService : Update Tracking Info', function(e, data) {
            if (data.id === that._id) {
              return $rootScope.$evalAsync(function() {
                var i, item, len, ref, results;
                that.trackingInfo = data.trackingInfo;
                that.trackingInfo.deliveryDay = new Date(that.trackingInfo.deliveryDay);
                ref = that.trackingInfo.history;
                results = [];
                for (i = 0, len = ref.length; i < len; i++) {
                  item = ref[i];
                  results.push(item.date = new Date(item.date));
                }
                return results;
              });
            }
          });
          $rootScope.$on('OrderService : Update Order', function(e, data) {
            if (data._id === that._id) {
              return $rootScope.$evalAsync(function() {
                _.extend(that, data);
                if (that.fulfillment.shipped) {
                  return PubNub('OrderService : Get Tracking Info', that._id);
                }
              });
            }
          });
        }

        Order.prototype.place = function() {
          if (this._rev == null) {
            return PubNub('OrderService : Place Order', this);
          }
        };

        return Order;

      })();
      window.Orders = orders = [];
      $rootScope.$on('PubNubService : Athlete Connected', function() {
        return PubNub('OrderService : Get Order List', Athlete);
      });
      $rootScope.$on('OrderService : Update Order List', function(e, data) {
        return $rootScope.$evalAsync(function() {
          var i, len, o, order;
          orders.splice(0, orders.length);
          for (i = 0, len = data.length; i < len; i++) {
            order = data[i];
            orders.push(o = new Order(Athlete._id));
            o._id = order.id;
            PubNub('OrderService : Get Order', order.id);
          }
          return orders.reverse();
        });
      });
      $rootScope.$on('OrderService : Order Placed', function() {
        return PubNub('OrderService : Get Order List', Athlete);
      });
      return {
        create: function() {
          return new Order(Athlete._id);
        },
        get: function() {
          return orders;
        }
      };
    }
  ]);

}).call(this);
