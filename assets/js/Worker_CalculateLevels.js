// Generated by CoffeeScript 1.9.2
(function() {
  'use strict';
  this.onmessage = function(e) {
    var avg, data, decayConstant, dose, doseActivity, hour, i, infusion, j, k, levels, load, max, maxLoad, min, rate, rateOfRelease, ref, ref1, ref2, ref3, ref4, ref5, start;
    data = e.data;
    decayConstant = Math.log(2) / data.halfLife;
    doseActivity = function(dose, day) {
      return dose * data.bioavailability * Math.pow(Math.E, -(day * decayConstant));
    };
    rateOfRelease = function(dose, day) {
      return decayConstant * doseActivity(dose, day);
    };
    levels = [];
    min = 0;
    max = 0;
    for (infusion = i = 0, ref = data.duration - data.interval, ref1 = data.interval; ref1 > 0 ? i <= ref : i >= ref; infusion = i += ref1) {
      max += rateOfRelease(100, infusion);
      if (infusion > 0) {
        min += rateOfRelease(100, infusion);
      }
    }
    avg = (min + max) * 0.5;
    dose = (data.activeTarget / avg) * 100;
    min = 0;
    max = 0;
    for (infusion = j = 0, ref2 = data.duration - data.interval, ref3 = data.interval; ref3 > 0 ? j <= ref2 : j >= ref2; infusion = j += ref3) {
      max += rateOfRelease(dose, infusion);
      if (infusion > 0) {
        min += rateOfRelease(dose, infusion);
      }
    }
    load = (max / rateOfRelease(dose, 0)) * dose;
    maxLoad = data.density * 3;
    if (load > maxLoad) {
      load = maxLoad;
    }
    for (infusion = k = 0, ref4 = data.duration - data.interval, ref5 = data.interval; ref5 > 0 ? k <= ref4 : k >= ref4; infusion = k += ref5) {
      start = infusion * 24;
      rate = 1;
      hour = start;
      while (rate >= 1) {
        rate = infusion === 0 ? rateOfRelease(load, (hour - start) / 24) : rateOfRelease(dose, (hour - start) / 24);
        levels[hour] = levels[hour] != null ? levels[hour] + rate : rate;
        hour += 1;
      }
    }
    max = levels[(data.duration - data.interval) * 24];
    min = levels[data.duration * 24];
    postMessage({
      levels: levels,
      min: min,
      max: max,
      avg: (min + max) * 0.5,
      dose: dose,
      loadingDose: load
    });
    return close();
  };

}).call(this);
